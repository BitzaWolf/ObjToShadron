#include "test_Output.shadron"
#include <affine_transform>
#define PI 3.14

// Near/far values for projection (minimum and maximum draw distance)
const float NEAR = 1.0/256.0, FAR = 256.0;

image text = file("ExampleTexture.png");

glsl struct _FragData
{
	vec2 texCoord;
};

glsl vec4 _Vertex(out _FragData fragmentData, int vertexIndex)
{
	vec3 vertex = PREFIX_TEST_Coord(vertexIndex);
	vertex = rotateX(vertex, shadron_Mouse.y * PI);
    vertex = translate(vertex, vec3(0.0, 0.0, -10));
	fragmentData.texCoord = PREFIX_TEST_TexCoord(vertexIndex);

    float fov = 0.5 * PI - atan(0.0625 * shadron_Mouse.z);
    return projectPerspectiveHFOV(vertex, fov, NEAR, FAR);
}

glsl vec4 _Fragment(in _FragData fragmentData)
{
    vec4 color = texture(text, fragmentData.texCoord);
	return color;
}

model _Output :
	fragment_data(_FragData),
	vertex(_Vertex, PREFIX_TEST_PRIMITIVES, PREFIX_TEST_VERTEX_COUNT),
	fragment(_Fragment),
	multisample(4);